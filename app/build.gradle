plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'dagger.hilt.android.plugin'
    id 'kotlin-parcelize'
    id 'kotlin-kapt'
}

android {
    namespace 'com.example.movie'
    compileSdk 33

    defaultConfig {
        applicationId "com.example.movie"
        minSdk 21
        targetSdk 33
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        freeCompilerArgs += ["-Xopt-in=kotlin.RequiresOptIn"]
        jvmTarget = '1.8'
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.1.1'
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }

    applicationVariants.all { variant ->
        def secureProps = new Properties()
        def securePropertiesFilePath = "../secure.properties"
        if (file(securePropertiesFilePath).exists()) {
            file(securePropertiesFilePath)?.withInputStream { secureProps.load(it) }
        }
        variant.buildConfigField "String", "BASEURL", secureProps.getProperty("BASEURL") ?: ""
        variant.buildConfigField "String", "APIKEY", secureProps.getProperty("APIKEY") ?: ""
    }
}

dependencies {
    //AndroidX
    implementation 'androidx.core:core-ktx:1.9.0'
    implementation 'androidx.activity:activity-compose:1.6.1'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.5.1'
    implementation 'androidx.activity:activity-compose:1.6.1'

    // Compose
    implementation "androidx.compose.ui:ui:$compose_ui_version"
    implementation "androidx.compose.ui:ui-tooling-preview:$compose_ui_version"
    implementation 'androidx.compose.material:material:1.3.1'
    implementation 'androidx.compose.runtime:runtime-livedata:1.3.3'
    implementation 'androidx.paging:paging-compose:1.0.0-alpha17'
    implementation 'androidx.navigation:navigation-compose:2.5.3'
    implementation 'com.google.accompanist:accompanist-pager:0.28.0'
    implementation 'androidx.lifecycle:lifecycle-runtime-compose:2.6.0-alpha03'

    // Dagger - Hilt
    implementation 'com.google.dagger:hilt-android:2.44'
    implementation 'androidx.hilt:hilt-navigation-compose:1.0.0'
    kapt 'com.google.dagger:hilt-android-compiler:2.44'

    // Retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.okhttp3:okhttp:5.0.0-alpha.2'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.10.0'

    // Glide
    implementation 'com.github.skydoves:landscapist-glide:2.1.0'

    // Test
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation 'androidx.compose.ui:ui-test-junit4:1.3.2'
    androidTestImplementation 'com.google.dagger:hilt-android-testing:2.44'
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'io.mockk:mockk:1.11.0'
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.6.4'
    testImplementation 'androidx.arch.core:core-testing:2.1.0'
    testImplementation 'com.google.dagger:hilt-android-testing:2.44'
    kaptTest 'com.google.dagger:hilt-android-compiler:2.44'
    kaptAndroidTest 'com.google.dagger:hilt-android-compiler:2.44'

}